@page "/configuracion"


<h1>Locker</h1>
<label><strong>Configuración</strong></label>


@if (Config != null)
{
    <div class="p-5">

        <hr><br>

        <form class="user">

            <div class="form-group">
                <label><strong>ID Locker</strong></label>
                <p>Identificador único de locker.</p>
                <p>Es utilizado para identificar a un locker en un sistema central.</p>
                <div style="display: flex; justify-content: center;">
                    <input type="text" @bind="Config.LockerID" class="form-control form-control-user col-3" />
                </div>
            </div>
            <hr><br>
            <div class="form-group">
                <label><strong>URL Servidor</strong></label>
                <p>Configuración de la dirección que corresponde al servidor central donde se conectará el Locker.</p>
                <div style="display: flex; justify-content: center;">
                    <input type="text" @bind="url" class="form-control form-control-user col-6" />
                </div>
            </div>
            <hr><br>
            <div class="form-group">
                <label><strong>Configuracion de modo</strong></label>
                <p>Conmutador entre modo tokens y modo assets.</p>
                <div style="display: flex; justify-content: center;" class="form-check form-switch">
                    <input type="checkbox" @bind="Config.IsAssets" class="form-check-input" />
                </div>
            </div>
            <hr><br>
            <div class="form-group">
                <label><strong>Tiempo de envío de status</strong></label>
                <p>Configuración del intervalo entre cada envío de estado, en milisegundos.</p>
                <div style="display: flex; justify-content: center;">
                    <input type="number" @bind="delayStatus" class="form-control form-control-user col-6" />
                </div>
            </div>
            <hr><br>
            <div class="form-group">
                <label><strong>Tiempo de pestaña superadmin</strong></label>
                <p>Configuración del tiempo que se tarda en volver de la pestaña de super-administrador, en milisegundos.</p>
                <div style="display: flex; justify-content: center;">
                    <input type="number" @bind="superadminTime" class="form-control form-control-user col-6" />
                </div>
            </div>
            <hr><br>
            <div class="form-group">
                <label><strong>Tiempo de pestaña admin</strong></label>
                <p>Configuración del tiempo que se tarda en volver de la pestaña de administrador, en milisegundos.</p>
                <div style="display: flex; justify-content: center;">
                    <input type="number" @bind="adminTime" class="form-control form-control-user col-6" />
                </div>
            </div>
            <hr><br>






            @* 
            <div class="form-group">
                <label>
                    <strong>
                        <span class="oi oi-wifi" aria-hidden="true"></span>   Red
                    </strong>
                </label>

                <div class="row" style="display: flex; justify-content: center;">

                    <button class="btn btn-outline-dark col-3" @onclick=gotoEthernet>Ethernet</button>
                    <button class="btn btn-outline-dark col-3" style="margin-left:10vw;" @onclick=gotoWifi>WiFi</button>
                </div>
            </div>
            <hr><br>

            <div class="form-group">
                <label><strong>Sensor presente</strong></label>
                <p>
                    Indica si el sensor de detección de objetos esta habilitado para su lectura
                </p>
                <input type="checkbox" class="form-control form-control-user" />
            </div>
            <hr><br>

            <div class="form-group">
                <label><strong>Alarma</strong></label>
                <p>
                    Indica el Nro de Alarma que se dispara en un cambio de estado de la caja
                </p>
                <input type="number" class="form-control form-control-user" />
            </div>

            <div class="form-group">
                <label><strong>Logo</strong></label>
                <p>
                    Cargar un logo
                </p>
            </div> *@

            @*<div class="form-group">
        <label><strong>Tipo de Locker</strong></label>
        <p>Contorlador utilizado por el locker para la apertura y sensado de box. Verifique con el instalador la correcta configuración.</p>
        <select @bind="Config.LockerType" class="form-control form-control-user">
        <option value="0">TCP</option>
        <option value="1">RS</option>
        </select>

        </div>
        <div class="form-group">
        <label><strong>Modo de funcionamiento</strong></label>
        <p>
        Modo de funcionamiento del locker.<br />
        NORMAL: los box son utilizados por usuarios registrados. <br />
        QR:Los box son utilizador por medios de tocken en formato QR
        </p>
        <select @bind="Config.LockerMode" class="form-control form-control-user">
        <option value="0">Normal</option>
        <option value="1">QR</option>
        </select>

        </div>
        <div class="form-group">
        <label><strong>Confirmación de Email</strong></label>
        <p>
        Utilize la confirmación de email para validar la información de los usuarios.
        El email es utilizado para blanquear el password del usuario en caso de olvido.
        </p>
        <input type="checkbox" @bind="Config.IsConfirmarEmail" class="form-control form-control-user" />
        </div>
        <div class="border-dark" style="border-style:solid; border:1px;">
        <h3>Servidor de Email</h3>
        <p>Servidor de Email a utilizar para el envio de email, tanto para alarmas y notificaciones.</p>
        <div class="form-group">
        <label><strong>Servidor Smtp</strong></label>
        <input type="text" @bind="Config.SmtpServer.Host" class="form-control form-control-user" />
        </div>
        <div class="form-group">
        <label><strong>Port</strong></label>
        <input type="number" @bind="Config.SmtpServer.Port" class="form-control form-control-user" />
        </div>
        <div class="form-group">
        <label><strong>From</strong></label>
        <input type="email" @bind="Config.SmtpServer.From" class="form-control form-control-user" />
        </div>
        <div class="form-group">
        <label><strong>Asunto</strong></label>
        <input type="text" @bind="Config.SmtpServer.Asunto" class="form-control form-control-user" />
        </div>
        <div class="form-group">
        <label><strong>Usuario</strong></label>
        <input type="text" @bind="Config.SmtpServer.UserName" class="form-control form-control-user" />
        </div>
        <div class="form-group">
        <label><strong>Password</strong></label>
        <input type="password" @bind="Config.SmtpServer.Password" class="form-control form-control-user" />
        </div>
        <div class="form-group">
        <label><strong>Requiere SSL</strong></label>
        <input type="checkbox" @bind="Config.SmtpServer.EnableSSL" class="form-control form-control-user" />
        </div>
        </div>*@



            <button type="button" class="btn btn-primary btn-user btn-block" @onclick="(() => Save())">Guardar</button>

        </form>
    </div>
}
else
{
    <div class="abs-center">
        <div class="spinner-grow text-secondary"></div>
        <div class="spinner-grow text-secondary"></div>
        <div class="spinner-grow text-secondary"></div>
    </div>
}


@code {
    LockerConfig Config;
    string url;
    int delayStatus, originalDelayStatus;
    int superadminTime, originalSuperadminTime;
    int adminTime, originalAdminTime;


    protected override async Task OnInitializedAsync()
    {
        delayStatus = await Cliente.GetDelayStatus();
        superadminTime = await Cliente.GetSuperadminTime();
        adminTime = await Cliente.GetAdminTime();

        originalDelayStatus = delayStatus;
        originalSuperadminTime = superadminTime;
        originalAdminTime = adminTime;

        Config = await Cliente.GetConfig();
        url = $"{Config.UrlServer}";
    }

    async Task Save()
    {
        try
        {
            var uriBuilder = new UriBuilder(url);
            Config.UrlServer = uriBuilder.Uri;

            if (delayStatus != originalDelayStatus)
            {
                if (!await Cliente.SetDelayStatus(delayStatus))
                    Console.WriteLine("Error al guardar DelayStatus.");
            }

            if (superadminTime != originalSuperadminTime)
            {
                if (!await Cliente.SetSuperadminTime(superadminTime))
                    Console.WriteLine("Error al guardar SuperadminTime.");
            }

            if (adminTime != originalAdminTime)
            {
                if (!await Cliente.SetAdminTime(adminTime))
                    Console.WriteLine("Error al guardar AdminTime.");
            }

            bool r = await Cliente.SetConfig(Config);
            if (r)
            {
                //notificamos que los cambios fueron registrados
                ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Exito",
                    Detail = "Se guardaron con éxito los cambios.",
                    Duration = 4000
                });
            }
            else
            {
                //advertencia porque no se grabaron los datos
                ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Hubo un error en el guardado.",
                    Duration = 4000
                });
            }
        }
        catch
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "Url del servidor no válido.",
                Duration = 4000
            });

        }

    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    // async Task gotoWifi()
    // {
    //     NavigationManager.NavigateTo("/wifi");
    // }
    // async Task gotoEthernet()
    // {
    //     NavigationManager.NavigateTo("/ethernet");
    // }
}
