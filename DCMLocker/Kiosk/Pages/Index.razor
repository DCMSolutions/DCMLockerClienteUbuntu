@page "/test"
@using DCMLocker.Kiosk.Pages.Components
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Threading
@inject NavigationManager Nav
@inject DCMLocker.Kiosk.Cliente.TLockerCliente Cliente
@inject NotificationService NotificationService

@if (screen == "keyboard")
{
    <br />
    <br /> 
    <div class="row justify-content-center align-items-center">
        <div class="col-12 text-center">
            <h1 style="margin-bottom: 5px;">Ingrese su código</h1>
            <h3 style="margin-top: 5px;">(Enter your code)</h3>
        </div>
        <div class="row justify-content-center align-items-center pt-4 pb-4">

            @if (isVisible)
            {
                @for (int i = 0; i < 6; i++)
                {
                    <Circle text=@(token.Length > i ? token[i].ToString() : "") />
                }

                <div @onclick=visibility style="position: absolute; right: 80%; width: 20%;">
                    <Eye />
                </div>
            }
            else
            {
                @for (int i = 0; i < 6; i++)
                {
                    <Circle text=@(token.Length > i ? "*" : "") />
                }

                <div @onclick=visibility style="position: absolute; right: 80%; width: 20%;">
                    <EyeOff />
                </div>
            }


        </div>

        <div class="row justify-content-center align-items-center">

            <div>
                <Button OnClick="@(() => addNumber(1))" text="1" />
            </div>


            <div>
                <Button OnClick="@(() => addNumber(2))" text="2" />
            </div>


            <div>
                <Button OnClick="@(() => addNumber(3))" text="3" />
            </div>


        </div>

        <div class="row justify-content-center align-items-center">


            <div>
                <Button OnClick="@(() => addNumber(4))" text="4" />
            </div>


            <div>
                <Button OnClick="@(() => addNumber(5))" text="5" />
            </div>


            <div>
                <Button OnClick="@(() => addNumber(6))" text="6" />
            </div>

        </div>


        <div class="row justify-content-center align-items-center">


            <div>
                <Button OnClick="@(() => addNumber(7))" text="7" />
            </div>


            <div>
                <Button OnClick="@(() => addNumber(8))" text="8" />
            </div>


            <div>
                <Button OnClick="@(() => addNumber(9))" text="9" />
            </div>

        </div>

        <div class="row justify-content-center align-items-center">


            <div>
                <Button OnClick="@(() => deleteNumber())" text="delete" />
            </div>

            <div>
                <Button OnClick="@(() => addNumber(0))" text="0" />
            </div>

            <div>
                <Button OnClick="@(disableTick ? null : (() => send()))" text="send" />
            </div>

        </div>
        <div class="col-12 text-center">
            <h3>O escanee su QR (or scan your barcode)</h3>

        </div>
    </div>
}
else if (screen == "success")
{
    <Success door="door" />
}
else if (screen == "invalidToken")
{
    <TokenInvalid />
}
else if (screen == "serverConnectionError")
{
    <ServerConnectionError />
}
else if (screen == "lockerConnectionError")
{
    <LockerConnectionError />
}
else if (screen == "cerradurasError")
{
    <CerradurasError />
}
else if (screen == "error")
{
    <div class="d-flex vh-100 justify-content-center align-items-center position-relative" style="background-color: yellow;">
        <div class="col-12 text-center">
            <h1 style="font-size: 200px; color: red; margin: 0;">⚠️</h1>
            <h1 style="margin-bottom: 5px;">Temporalmente fuera de servicio</h1>
            <h3 style="margin-top: 5px;">Temporarily out of order</h3>
        </div>
        <div class="position-absolute" style="bottom: 10px; left: 10px;">
            <h3>Código @codigo</h3>
        </div>
        <div class="position-absolute" style="bottom: 25px; right: 10px;">
            <button class="btn btn-outline-dark" @onclick="fastServicioTecnico">Solo retiro</button>
        </div>
    </div>
}
else if (screen == "red")
{
    <div class="row">
        <div class="col-12" align="left">
            <button class="btn btn-outline-warning" @onclick="CheckEstados">Volver</button>
        </div>
    </div>

    <h3>Configuración de red</h3>
    @if (Ips != null)
    {
        <div class="row">
            @for (int x = 0; x < Ips.Length; x++)
            {
                <div class="col-lg-6">
                    <p><strong>IP:</strong>@Ips[x].IP</p>
                    <p><strong>MASK:</strong>@Ips[x].NetMask</p>
                    <p><strong>Tipo:</strong>@Ips[x].NetworkInterfaceType</p>
                    <p><strong>Estado:</strong>@Ips[x].NetworkOperationalStatus</p>
                </div>
            }
        </div>
    }
    @* <div class="row mb-2">
        <div class="col-6">
            <button type="button" class="btn btn-info btn-user btn-block" @onclick="InfoTewer" title="Obtener ID del teamviewer">Info tewer</button>
        </div>
        <div class="col-6">
            <button type="button" class="btn btn-info btn-user btn-block" @onclick="PassTewer" title="Establecer la contraseña de TeamViewer">Contraseña tewer</button>
        </div>
    </div> *@
    <button type="button" class="btn btn-success btn-user btn-block mb-2" @onclick="@(e => alertaGeneral("actualizará"))">Actualizar locker</button>
    @* <button type="button" class="btn btn-primary btn-user btn-block mb-2" @onclick="@(e => alertaGeneral("actualizará a testing"))">Actualizar locker a testing</button> *@
    <button type="button" class="btn btn-warning btn-user btn-block mb-2" @onclick="@(e => alertaGeneral("reseteará"))">Resetear locker</button>
    <button type="button" class="btn btn-danger btn-user btn-block mb-2" @onclick="@(e => alertaGeneral("apagará"))">Apagar locker</button>

    @* <br />
    <a>@tewerID</a>
    <a>@tewerPASS</a>
    <br /> *@

    <a>Versión @version del día @fecha</a>
    <br />
    <a>Número de serie: @nroSerie</a>

}
else if (screen == "ip")
{
    <div class="row">
        <div class="col-12" align="left">
            <button class="btn btn-outline-warning" @onclick="CheckEstados">Volver</button>
        </div>
    </div>

    <h3>Configuración de red</h3>
    @if (IpsFiltered != null)
    {
        <div class="row">
            @for (int x = 0; x < IpsFiltered.Length; x++)
            {
                <div class="col-lg-6">
                    <p><strong>IP:</strong>@IpsFiltered[x].IP</p>
                    <p><strong>MASK:</strong>@IpsFiltered[x].NetMask</p>
                    <p><strong>Tipo:</strong>@IpsFiltered[x].NetworkInterfaceType</p>
                    <p><strong>Estado:</strong>@IpsFiltered[x].NetworkOperationalStatus</p>
                </div>
            }
        </div>
    }
    <button type="button" class="btn btn-warning btn-user btn-block" @onclick="@(e => alertaGeneral("reseteará"))">Resetear locker</button>
    <button type="button" class="btn btn-danger btn-user btn-block" @onclick="@(e => alertaGeneral("apagará"))">Apagar locker</button>

    <br />
    <a>- 01: Error de conexión con controladora de cerraduras.</a>
    <br />
    <a>- 02: Error de conexión al servidor.</a>
    <br />
    <a>- 03: Error de conexión de red ethernet.</a>
    <br />
    <a>- 04: Error de conexión a internet.</a>
    <br />
    <a>- 05: Error de conexión de cerraduras y de internet.</a>
    <br />
    <a>- 99: Error inesperado.</a>
    <br />
    <a>Número de serie: @nroSerie</a>

}
else if (screen == "alerta")
{
    <br />
    <br />
    <h3>¿Está seguro?</h3>
    <h5>Se @pregunta este locker</h5>
    <br />

    <div style="display: flex; gap: 10px;">
        <button type="button" style="flex: 1;" class="btn btn-primary btn-user" @onclick="@(e => confirmar())">Confirmar</button>
        <button type="button" style="flex: 1;" class="btn btn-secondary btn-user" @onclick="@(e => CheckEstados())">Cancelar</button>
    </div>
}

@code {
    int[] token = { };
    bool isVisible;

    string screen = "keyboard";
    int door;
    private HubConnection QRhubConnection;
    private HubConnection ServerHubConnection;
    string estadoCerraduras;
    string statusRed = "Conexion al servidor";
    string codigo;
    string pregunta;
    bool disableTick = false;
    CancellationTokenSource? _cts;      //es para cancelar los task.delay


    SystemNetwork[] Ips { get; set; }
    SystemNetwork[] IpsFiltered { get; set; }
    string version;
    string fecha;
    string nroSerie;
    // string tewerID;
    // string tewerPASS;

    protected override async Task OnInitializedAsync()
    {
        Ips = await Cliente.System_GetIP();
        IpsFiltered = Ips.Where(ip => !ip.IP.EndsWith(".2.3")).ToArray();
        bool pingServer = await Cliente.PingServer();
        if (!pingServer) statusRed = "Desconexion del servidor";
        if (IpsFiltered.Count() == 0) statusRed = "Desconexion de red";

        version = await Cliente.GetVersion();
        fecha = await Cliente.GetFecha();
        nroSerie = await Cliente.GetNroSerie();

        QRhubConnection = new HubConnectionBuilder()
        .WithUrl(Nav.ToAbsoluteUri("/QRReaderHub"))
        .WithAutomaticReconnect()
        .Build();

        ServerHubConnection = new HubConnectionBuilder()
        .WithUrl(Nav.ToAbsoluteUri("/ServerHub"))
        .WithAutomaticReconnect()
        .Build();

        QRhubConnection.On<string>("ReceiveToken", (string text) =>
        {
            text = text.Substring(0, Math.Min(text.Length, 6));

            if (text.Length <= 8)
            {
                Array.Resize(ref token, text.Length);
                bool validText = true;
                for (int i = 0; i < text.Length; i++)
                {
                    if (char.IsDigit(text[i]))
                    {
                        token[i] = text[i] - '0'; // Convert character to integer
                    }
                    else
                    {
                        validText = false;
                        break;
                    }
                }
                if (validText && statusRed == "Conexion al servidor")
                {
                    send();
                }
                else if (validText)
                {
                    Console.WriteLine("No hay señal y se leyo un QR.");
                    ShowNotificationError("No hay conexión.");
                }
                else
                {
                    Console.WriteLine("Input contains non-numeric characters.");
                    ShowNotificationError("El código contiene caracteres no numericos.");
                }
            }
            else
            {
                Console.WriteLine("Input contains more than 6 numbers.");
                ShowNotificationError("El código contiene mas de 6 números.");
            }


            StateHasChanged();
        });

        ServerHubConnection.On<string>("STATUS", (message) =>
        {
            statusRed = message;
            CheckEstados();
        });

        ServerHubConnection.On<string>("CERRADURAS", (message) =>
        {
            estadoCerraduras = message;
            CheckEstados();
        });

        await QRhubConnection.StartAsync();
        await ServerHubConnection.StartAsync();

        estadoCerraduras = await Cliente.GetEstadoCerraduras();
        CheckEstados();
    }

    async void fastServicioTecnico()
    {
        screen = "keyboard";
        StateHasChanged();
        await Task.Delay(10000);
        CheckEstados();
    }

    void CheckEstados()
    {
        _cts?.Cancel();
        StateHasChanged();
        if (estadoCerraduras == "Conectadas" && statusRed == "Conexion al servidor") screen = "keyboard";
        else if (estadoCerraduras == "Desconectadas" && (statusRed == "Desconexion del servidor" || statusRed == "Desconexion de red" || statusRed == "Desconexion de internet")) ScreenError("05");
        else if (estadoCerraduras == "Desconectadas") ScreenError("01");
        else if (statusRed == "Desconexion del servidor") ScreenError("02");
        else if (statusRed == "Desconexion de red") ScreenError("03");
        else if (statusRed == "Desconexion de internet") ScreenError("04");
        else ScreenError("99: error inesperado, informar a pedrop@dcm.com.ar por favor, gracias");
        token = new int[0];
        StateHasChanged();
    }

    void ScreenError(string err)
    {
        codigo = err;
        screen = "error";
    }

    void visibility()
    {
        isVisible = !isVisible;
        StateHasChanged();
    }

    void addNumber(int number)
    {
        if (token.Length < 6)
        {
            Array.Resize(ref token, token.Length + 1);
            token[token.Length - 1] = number;
        }
    }

    void deleteNumber()
    {
        if (token.Length > 0)
        {
            Array.Resize(ref token, token.Length - 1);
        }
    }

    async void send()
    {
        disableTick = true;
        string resultado = string.Concat(token);
        token = new int[0];
        _cts?.Cancel();

        if (resultado == "3942")
        {
            await Cliente.PostEvento(new Evento("Se ingresó código 3942", "debug"));
            Cliente.SendWebhookAsync("Debug", "Se ingresó el código de superadmin", new { Accion = "Superadmin" });

            int superadminTime = await Cliente.GetSuperadminTime();
            estadoCerraduras = await Cliente.GetEstadoCerraduras();
            Ips = await Cliente.System_GetIP();
            IpsFiltered = Ips.Where(ip => !ip.IP.EndsWith(".2.3")).ToArray();
            screen = "red";
            StateHasChanged();
            _cts = new CancellationTokenSource();
            try
            {
                await Task.Delay(superadminTime, _cts.Token);
                CheckEstados();
            }
            catch (TaskCanceledException) { } // no hacer nada, el usuario apretó "Volver"
        }
        else if (resultado == "6641")
        {
            await Cliente.PostEvento(new Evento("Se ingresó código 6641", "debug"));
            Cliente.SendWebhookAsync("Debug", "Se ingresó el código de admin", new { Accion = "Admin" });

            int adminTime = await Cliente.GetAdminTime();
            estadoCerraduras = await Cliente.GetEstadoCerraduras();
            Ips = await Cliente.System_GetIP();
            IpsFiltered = Ips.Where(ip => !ip.IP.EndsWith(".2.3")).ToArray();
            screen = "ip";
            StateHasChanged();
            _cts = new CancellationTokenSource();
            try
            {
                await Task.Delay(adminTime);
                CheckEstados();
            }
            catch (TaskCanceledException) { } // no hacer nada, el usuario apretó "Volver"
        }
        else if (resultado != "" && resultado != null && resultado != "0")
        {
            try
            {
                await esperarQueSeAbra(resultado);
                screen = "success";
                StateHasChanged();
                await Task.Delay(3000);
                CheckEstados();
            }
            catch (Exception er)
            {
                Console.WriteLine(er.Message);
                screen = er.Message;
                StateHasChanged();
                await Task.Delay(3000);
                CheckEstados();
            }
        }
        disableTick = false;
        StateHasChanged();
    }

    void ShowNotificationError(string message)
    {
        Console.WriteLine("notif error");
        NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = "Error",
            Detail = message,
            Duration = 4000
        });
    }

    async Task esperarQueSeAbra(string resultado)
    {
        // int iter = 0;
        // bool abierta = false;

        // var inicialState = await Cliente.GetState();

        door = await Cliente.TokenKey(resultado);

        //while (iter < 10 && abierta != true)
        //{
        //    Console.WriteLine("iter: " + $"{iter + 1}");

        //    var otroState = await Cliente.GetState();

        //    abierta = inicialState.Zip(otroState, (initial, otro) =>
        //            initial.Box.Zip(otro.Box, (initialBox, otroBox) =>
        //                initialBox.Door != otroBox.Door))
        //        .SelectMany(x => x)
        //        .Any(x => x);

        //    Console.WriteLine("abierta " + abierta);

        //    iter++;
        //    if (iter == 10) throw new Exception("connectionError");
        //    await Task.Delay(500);
        //}
    }

    public async void confirmar()
    {
        if (pregunta == "apagará") await Cliente.System_Shutdown();
        else if (pregunta == "reseteará") await Cliente.System_Reset();
        // else if (pregunta == "actualizará a testing") await Cliente.System_UpdateTesting();
        else if (pregunta == "actualizará") await Cliente.System_Update();
        else CheckEstados();
    }

    // protected async void InfoTewer()
    // {
    //     tewerID = await Cliente.System_TewerID();
    //     StateHasChanged();
    // }

    // protected async void PassTewer()
    // {
    //     tewerPASS = await Cliente.System_TewerPASS();
    //     StateHasChanged();
    // }

    public void alertaGeneral(string funcion)
    {
        pregunta = funcion;
        screen = "alerta";
    }
}
