@page "/assets"

@implements IAsyncDisposable
@inject IJSRuntime JS

<style>
    html, body {
        height: 100%;
        overflow: hidden;
    }

    .kiosk-full {
        height: 100vh;
    }

    .kiosk-up {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        padding-top: 6vh;
    }

    .kiosk-center {
        display: flex;
        flex-direction: column;
        justify-content: center;
        min-height: 100vh;
    }

    .action-card, .asset-card, .state-card {
        min-height: 24vh;
        border-width: 2px;
        transition: transform .08s, box-shadow .08s;
        cursor: pointer;
    }

        .action-card:active, .asset-card:active, .state-card:active {
            transform: scale(0.99);
        }

        .action-card .card-body, .asset-card .card-body, .state-card .card-body {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
        }

    .selected {
        background: #007bff;
        color: #fff;
        border-color: #007bff;
    }

    .progress-bar {
        transition: width .3s linear;
    }
</style>

<div class="container kiosk-full">

    @if (_screen == Screen.Select)
    {
        <div class="kiosk-up">
            <div class="text-center mb-4">
                <p class="text-muted m-0">Escanee su tarjeta y seleccione acción</p>
            </div>

            <div class="text-center mb-4">
                @if (!string.IsNullOrEmpty(_rfid))
                {
                    <div style="font-size:48px;line-height:1;word-break:break-all;">@_rfid</div>
                    <div class="text-muted mt-2">Leído @(_readAt.ToString("HH:mm:ss"))</div>
                }
                else
                {
                    <div class="text-muted">Esperando lectura…</div>
                }
            </div>

            <div class="row justify-content-center">
                <div class="col-sm-6 col-md-5 col-lg-4 mb-4">
                    <div class="card action-card shadow-sm @(IsSelected(AssetsAccion.Retiro) ? "selected" : "border-secondary")"
                         @onclick="() => SelectAccion(AssetsAccion.Retiro)">
                        <div class="card-body text-center"><h4>Retiro</h4></div>
                    </div>
                </div>

                <div class="col-sm-6 col-md-5 col-lg-4 mb-4">
                    <div class="card action-card shadow-sm @(IsSelected(AssetsAccion.Devolucion) ? "selected" : "border-secondary")"
                         @onclick="() => SelectAccion(AssetsAccion.Devolucion)">
                        <div class="card-body text-center"><h4>Devolución</h4></div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (_screen == Screen.Loading)
    {
        <div class="kiosk-center text-center">
            <div class="spinner-border text-primary mb-3" role="status"><span class="sr-only">Cargando...</span></div>
            <div class="text-muted">@_loadingText</div>
        </div>
    }
    else if (_screen == Screen.ChooseAsset)
    {
        <div class="kiosk-up">
            <div class="text-center mb-3">
                <h4 class="m-0">Seleccione el asset a retirar</h4>
                @if (!string.IsNullOrEmpty(_employeeName))
                {
                    <div class="text-muted">Empleado: @_employeeName</div>
                }
            </div>

            @if (_assets.Count == 0)
            {
                <div class="text-center text-muted">No hay assets disponibles para retiro.</div>
                <div class="text-center mt-4"><button class="btn btn-outline-secondary" @onclick="Reset">Volver</button></div>
            }
            else
            {
                <div class="row justify-content-center">
                    @foreach (var a in _assets)
                    {
                        var isSel = _selectedAsset?.IdAsset == a.IdAsset;
                        <div class="col-12 col-md-6 col-lg-5 mb-4">
                            <div class="card asset-card shadow-sm @(isSel ? "selected" : "border-secondary")"
                                 @onclick="@(() => SelectAsset(a))">
                                <div class="card-body text-center">
                                    <div>
                                        <h5 class="mb-2">@a.NombreAsset</h5>
                                        <div class="small @(isSel ? "text-white-50" : "text-muted")">
                                            ID: @a.IdAsset &nbsp;|&nbsp; Box: @a.IdBox
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="text-center">
                    <button class="btn btn-primary btn-lg" disabled="@(_selectedAsset == null)" @onclick="GoConfirmRetiro">Continuar</button>
                    <button class="btn btn-outline-secondary btn-lg ml-2" @onclick="Reset">Cancelar</button>
                </div>
            }
        </div>
    }
    else if (_screen == Screen.ConfirmRetiro)
    {
        <div class="kiosk-center text-center">
            <h4 class="mb-3">¿Confirmar retiro?</h4>
            <div class="mb-3">
                <div class="lead mb-1">@_selectedAsset?.NombreAsset</div>
                <div class="text-muted">ID: @_selectedAsset?.IdAsset &nbsp;|&nbsp; Box: @_selectedAsset?.IdBox</div>
            </div>

            <div>
                <button class="btn btn-success btn-lg mr-2" @onclick="SendRetiro">Sí, confirmar</button>
                <button class="btn btn-outline-secondary btn-lg" @onclick="CancelConfirm">No, volver</button>
            </div>
        </div>
    }
    else if (_screen == Screen.ScanQr)
    {
        <div class="kiosk-center text-center">
            <div class="mb-3">
                <h4 class="m-0">Escanee el QR de su activo</h4>
                @if (!string.IsNullOrEmpty(_employeeName))
                {
                    <div class="text-muted">Empleado: @_employeeName</div>
                }
            </div>
            <div class="text-muted mb-4">Acerque el código frente al lector…</div>
            <div><button class="btn btn-outline-secondary" @onclick="Reset">Cancelar</button></div>
        </div>
    }
    else if (_screen == Screen.DevolucionSetEstado)
    {
        <div class="kiosk-up">
            <div class="text-center mb-3">
                <h4 class="m-0">Activo seleccionado</h4>
                <div class="text-muted">ID: @_selectedAsset?.IdAsset &nbsp;|&nbsp; Box: @_selectedAsset?.IdBox</div>
                <div class="lead mt-2">@_selectedAsset?.NombreAsset</div>
            </div>

            <div class="text-center mb-3">
                <p class="m-0">Seleccione estado del activo</p>
            </div>

            <div class="row justify-content-center">
                <div class="col-sm-6 col-md-5 col-lg-4 mb-4">
                    <div class="card state-card shadow-sm @(_devolEstado == AssetsEstado.Funcional ? "selected" : "border-secondary")"
                         @onclick="@(() => SelectEstado(AssetsEstado.Funcional))">
                        <div class="card-body text-center"><h5>Funcional</h5></div>
                    </div>
                </div>

                <div class="col-sm-6 col-md-5 col-lg-4 mb-4">
                    <div class="card state-card shadow-sm @(_devolEstado == AssetsEstado.Defectuoso ? "selected" : "border-secondary")"
                         @onclick="@(() => SelectEstado(AssetsEstado.Defectuoso))">
                        <div class="card-body text-center"><h5>Defectuoso</h5></div>
                    </div>
                </div>
            </div>

            <div class="text-center">
                <button class="btn btn-primary btn-lg" disabled="@(_devolEstado is null)" @onclick="ProceedDevolucion">
                    Continuar
                </button>
                <button class="btn btn-outline-secondary btn-lg ml-2" @onclick="Reset">Cancelar</button>
            </div>
        </div>
    }
    else if (_screen == Screen.Result)
    {
        <div class="kiosk-center">
            <div class="mb-3">
                <h4>Respuesta</h4>
                <pre class="bg-light p-3 rounded" style="white-space:pre-wrap; word-break:break-word;">@_resultRaw</pre>
            </div>

            <div class="mb-2 text-muted text-center">Volviendo en @_countdown s…</div>
            <div class="progress mb-3" style="height: 12px;">
                <div class="progress-bar" role="progressbar" style="width:@PercentDone()"></div>
            </div>

            <div class="text-center">
                <button class="btn btn-outline-secondary btn-sm" @onclick="Reset">Volver ahora</button>
            </div>
        </div>
    }
</div>

@code {
    enum Screen { Select, Loading, ChooseAsset, ConfirmRetiro, ScanQr, DevolucionSetEstado, Result }
    Screen _screen = Screen.Select;

    // entrada
    private string? _rfid;
    private AssetsAccion? _accion;
    private DateTime _readAt;

    // respuesta SendRequest
    private string _employeeName = "";
    private List<ShortAsset> _assets = new();
    private ShortAsset? _selectedAsset;

    // devolución: estado del activo (guardado pero no usado aún para el backend)
    private AssetsEstado? _devolEstado;

    // resultado final
    private string _resultRaw = "";
    private int _countdown = 20;
    private const int _resultSeconds = 20;
    private CancellationTokenSource? _countdownCts;
    private bool _sending;
    private string _loadingText = "Enviando solicitud…";

    // JS / SignalR
    private IJSObjectReference? _scannerModule;
    private DotNetObjectReference<Assets>? _selfRef;
    private HubConnection? _hub;            // RFID
    private HubConnection? QRhubConnection; // QR

    // --- init ---
    protected override async Task OnInitializedAsync()
    {
        // Hub de QR
        QRhubConnection = new HubConnectionBuilder()
            .WithUrl(Nav.ToAbsoluteUri("/QRReaderHub"))
            .WithAutomaticReconnect()
            .Build();

        QRhubConnection.On<string>("ReceiveToken", (string text) =>
        {
            if (_screen != Screen.ScanQr) return;      // solo escuchamos durante el escaneo de QR
            HandleQrScan(text);
        });

        // Hub de RFID
        _hub = new HubConnectionBuilder()
            .WithUrl(Nav.ToAbsoluteUri("/RFIDReaderHub"))
            .WithAutomaticReconnect()
            .Build();

        _hub.On<string>("ReceiveRFID", token =>
        {
            if (_screen != Screen.Select) return;
            SetRfid(token);
        });

        await _hub.StartAsync();
        await QRhubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        _scannerModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/LectorRFID.js");
        _selfRef = DotNetObjectReference.Create(this);
        await _scannerModule.InvokeVoidAsync("attach", _selfRef, new { acceptTabAsEnter = true });
    }

    [JSInvokable]
    public async Task OnScanEnter(string text)
    {
        if (_screen != Screen.Select) return;
        SetRfid(text);

        if (_hub is not null && _hub.State == HubConnectionState.Connected)
            await _hub.SendAsync("SendToken", text);
    }

    private void SetRfid(string token)
    {
        _rfid = token;
        _readAt = DateTime.Now;
        _ = TryProceedAsync();
        StateHasChanged();
    }

    bool IsSelected(AssetsAccion a) => _accion == a;
    void SelectAccion(AssetsAccion a) { _accion = a; _ = TryProceedAsync(); StateHasChanged(); }

    // --- paso 1: enviar solicitud y ramificar ---
    async Task TryProceedAsync()
    {
        if (_sending) return;
        if (string.IsNullOrWhiteSpace(_rfid) || _accion is null) return;

        _sending = true;
        _loadingText = "Enviando solicitud…";
        _screen = Screen.Loading;
        StateHasChanged();

        try
        {
            var req = new AssetsRequest { IdEmpleado = _rfid!, Accion = _accion.Value };
            var resp = await Cliente.SendRequest(req);

            _employeeName = resp?.NombreEmpleado ?? "";
            _assets = resp?.AssetsList ?? new List<ShortAsset>();

            if (_accion == AssetsAccion.Retiro)
            {
                _selectedAsset = null;
                _screen = Screen.ChooseAsset;
            }
            else // Devolución
            {
                if (_assets.Count == 0)
                {
                    _resultRaw = "No hay activos disponibles para devolución.";
                    GoResult();
                }
                else
                {
                    _selectedAsset = null;
                    _devolEstado = null;
                    _screen = Screen.ScanQr; // esperar QR del activo
                }
            }
        }
        catch (Exception ex)
        {
            _resultRaw = $"ERROR: {ex.Message}";
            GoResult();
        }
        finally
        {
            _sending = false;
            StateHasChanged();
        }
    }

    // --- RETIRO ---
    void SelectAsset(ShortAsset a) => _selectedAsset = a;
    void GoConfirmRetiro() { if (_selectedAsset == null) return; _screen = Screen.ConfirmRetiro; }
    void CancelConfirm() => _screen = Screen.ChooseAsset;

    async Task SendRetiro()
    {
        if (_selectedAsset == null) return;
        _loadingText = "Procesando retiro…";
        _screen = Screen.Loading;
        StateHasChanged();

        try
        {
            var ret = await Cliente.OpenBoxByFisico(_selectedAsset.IdBox);
            _resultRaw = ret.ToString() ?? "OK";
            GoResult();
        }
        catch (Exception ex)
        {
            _resultRaw = $"ERROR: {ex.Message}";
            GoResult();
        }
    }

    // --- DEVOLUCIÓN ---
    void HandleQrScan(string text)
    {
        var match = _assets.FirstOrDefault(a => string.Equals(a.IdAsset, text?.Trim(), StringComparison.OrdinalIgnoreCase));
        if (match == null)
        {
            _resultRaw = "Activo no registrado";
            GoResult();
            return;
        }

        _selectedAsset = match;
        _devolEstado = null;
        _screen = Screen.DevolucionSetEstado;
        StateHasChanged();
    }

    void SelectEstado(AssetsEstado estado) => _devolEstado = estado;

    async Task ProceedDevolucion()
    {
        if (_selectedAsset == null) return;

        // (Guardamos el estado elegido en memoria para usarlo luego en backend si hace falta)
        var estadoElegido = _devolEstado; // no se usa aún

        _loadingText = "Procesando devolución…";
        _screen = Screen.Loading;
        StateHasChanged();

        try
        {
            var ret = await Cliente.OpenBoxByFisico(_selectedAsset.IdBox);
            _resultRaw = ret.ToString() ?? "OK";
            GoResult();
        }
        catch (Exception ex)
        {
            _resultRaw = $"ERROR: {ex.Message}";
            GoResult();
        }
    }

    // --- Result + countdown ---
    void GoResult()
    {
        _screen = Screen.Result;
        _countdownCts?.Cancel();
        _countdownCts = new CancellationTokenSource();
        _ = StartCountdownAsync(_resultSeconds, _countdownCts.Token);
    }

    async Task StartCountdownAsync(int seconds, CancellationToken token)
    {
        _countdown = seconds;
        await InvokeAsync(StateHasChanged);

        while (_countdown > 0 && !token.IsCancellationRequested)
        {
            try { await Task.Delay(1000, token); } catch { break; }
            _countdown--;
            await InvokeAsync(StateHasChanged);
        }
        if (!token.IsCancellationRequested) Reset();
    }

    void Reset()
    {
        _countdownCts?.Cancel();

        _rfid = null;
        _accion = null;
        _employeeName = "";
        _assets.Clear();
        _selectedAsset = null;
        _devolEstado = null;

        _resultRaw = "";
        _screen = Screen.Select;
        StateHasChanged();
    }

    string PercentDone()
    {
        var done = (_resultSeconds - _countdown) * 100 / Math.Max(1, _resultSeconds);
        return done + "%";
    }

    // --- dispose ---
    public async ValueTask DisposeAsync()
    {
        try { if (_scannerModule != null) await _scannerModule.InvokeVoidAsync("detach"); } catch { }
        _selfRef?.Dispose();

        try { if (_hub != null) { await _hub.StopAsync(); await _hub.DisposeAsync(); } } catch { }
        try { if (QRhubConnection != null) { await QRhubConnection.StopAsync(); await QRhubConnection.DisposeAsync(); } } catch { }
        try { _countdownCts?.Cancel(); } catch { }
    }
}
