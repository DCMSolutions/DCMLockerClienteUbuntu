@page "/assets"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@implements IAsyncDisposable
@inject IJSRuntime JS

<div class="vh-100 d-flex flex-column justify-content-center align-items-center">
    <h1 class="mb-3">Acerque su tarjeta</h1>

    @if (!string.IsNullOrEmpty(_last))
    {
        <div class="text-center">
            <div style="font-size:64px;line-height:1;word-break:break-all;">@_last</div>
            <div class="text-muted mt-2">Leído @(_readAt.ToString("HH:mm:ss"))</div>
        </div>
    }
    else
    {
        <div class="text-muted">Esperando lectura…</div>
    }
</div>

@code {
    private IJSObjectReference? _scannerModule;
    private DotNetObjectReference<Assets>? _selfRef;
    
    private HubConnection? _hub;

    private string _last = "";
    private DateTime _readAt;

    protected override async Task OnInitializedAsync()
    {
        _hub = new HubConnectionBuilder()
            .WithUrl(Nav.ToAbsoluteUri("/RFIDReaderHub")) 
            .WithAutomaticReconnect()
            .Build();

        _hub.On<string>("ReceiveRFID", (token) =>                       
        {
            _last = token;
            _readAt = DateTime.Now;
            InvokeAsync(StateHasChanged);
        });

        await _hub.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        _scannerModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/LectorRFID.js");
        _selfRef = DotNetObjectReference.Create(this);

        await _scannerModule.InvokeVoidAsync("attach", _selfRef, new { acceptTabAsEnter = true });
    }


    [JSInvokable]
    public async Task OnScanEnter(string text)  
    {
        // 1) mostrar local
        _last = text;
        _readAt = DateTime.Now;
        StateHasChanged();

        // 2) publicar para TODAS las /assets (otras pestañas y equipos)
        if (_hub is not null && _hub.State == HubConnectionState.Connected)
            await _hub.SendAsync("SendToken", text);
    }

    public async ValueTask DisposeAsync()
    {
        try { if (_scannerModule != null) await _scannerModule.InvokeVoidAsync("detach"); } catch { }
        _selfRef?.Dispose();
        try { if (_hub != null) { await _hub.StopAsync(); await _hub.DisposeAsync(); } } catch { }
    }

}
